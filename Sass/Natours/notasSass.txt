*{
  para hacer que todos los browsers lo vean igual
}

1 clase - heading parte 1

  box-sizing: border-box;
    el padding y el border ya no cuentan en el box-model para calcular el total width y total height
      *tomar en cuenta que si tienes esta propiedad y pones padding, entonces reduces el width interno para donde va el contenido en sí (texto o imagenes) (explicado en 3-19)

  para el header
    background-size: cover; /* tratara de hacer fit  */
    background-position: top; /* te permite cortar la imagen desde arriba, centro o abajo */

    clip-path  /* para formar una poligono -- puedes sacar varios puntos a partir de esta pagina http://bennettfeely.com/clippy/ */

  <div class="logo-box">
    <img src="img/logo-white.png" alt="Logo" class="logo">
  </div>

2 clase - heading parte 2

  position : absolute; -> cuando no se pnoe un relativo, se toma al padre
    si es 50% de top y left seria movido desde arriba e izquierda 50% del elemento padre

  pero cuando pones transform : translate(-50%,-50%) se refiere a mover el elemento con respecto de si mismo
    eso ayuda a centrarlo mas facilmente

3 clase - animaciones con el header

  se crea un keyframe con un nombre y se le da porcentajes para indicar ciertas propiedades

  luego con las propiedades 
    animation-name
    animation-duration

    se agregan las propiedades definidas en la animación al elemento/s
    así puedes agregar las animaciones a mas de un elemento y a mas de un selector (hovers, load pages ,etc)

  se pueden agregar otras propiedades para la animacion como

    animation-delay : 3s; 
    animation-iteration-count: 3;
    animation-timing-function : ease; /* ease in empieza rapido y luego va mas lento */

  cuando haces animaciones con transform querras agregar esta propiedad a su contenedor
    backface-visibility: hidden;

    para evitar un movimiento minusculo pero notable al final de cada animacion. esta propiedad evita ese movimiento

4 clase - empezar con animacion del boton

  border radius tiene un tope, si djeas un valor mas alto que ese queda igual
  
  las animaciones se realizan mucho con transform de modo que es una propiedad muy importante

  transition habilita las animaciones hechas con transform
    *la propiedad de transition se aplica siempre al estado inicial del elemento

5 clase - seguir con la animacion del boton

  ::after
    resulta ser un elemento hijo del elemento seleccionado
    en esta clase se usa para poder crear una animación con la propiedad de hover

    siempre tiene un setup, por ejemplo el content siempre debe ser "" o sino no sale
      como es un hijo del elemento seleccionado, puedes hacer position: absolute y al elemento en sí ponerle position relative

  animation-fill-mode: backwards;
    aplica los estilos del keyfram al 0% antes de empezar la animacion

---- SECCION 2 --- 

1 clase - 3 pilares de buen html y css

  se necesitan 3 cosas para hacer buen html y css

  -Responsive design
    
  -Código mantenible y escalable
    necesita de estructurar bien tus archivos y nombrar bien tus clases
  -Web performance
    usar menos de... HTTP requests, codigo, imagenes
    comprimir codigo e imagenes  
  
  * clases teóricas *

2 clase - cambiar de px a rem

  para trabajar en rems, define el valor de 10 px en html
    con 10px es mas facil pasar a rem todo ya que si quieres decir 50px se transforma a 5rem
      solo se divide entre 10

  * poner px en html es mala practica *
    porque es una propiedad que el usuario escoge desde su navegador (puede ser 16px o 18px o 22px segun el usuario quiera)
      así que es mejor ponerlo a un porcentaje
        font-size: 62.5%; /* que viene de :  100%*(10/16) */

  pasarlo a em en lugar de rem es mas tedioso ya que necesitas hacer mas calculos
    porque em depende del font-size del elemento padre
    rem siempre es del documento root que está en html

3 clase - teórica - css architecture

  think - build - architect

  atom design

  BEM - Block Element Modifier

    .block__element--modifier {

    }

    block - por si solos tienen sentido
    element - relacionados al bloque. por si solos no tienen sentido
    modifier - crean versiones modificadas del bloque

    BEM hace el codigo mucho mas facil de leer y entender

  metodos para estructurar el css
    ITCSS method
    S max method
    The 7-1 pattern
      7 carpetas para partials en sass
        base
        components
        layout
        pages
        themes
        abstracts
        vendors
      1 archivo sass principal para importar todos los demas en un solo css
  
4 clase - poniendo en practica BEM en el HTML hasta ahora avanzado

  logo-box era una clase aplicada al logo de la pagina que se encuentra en el header
    no es normalmente un estilo que se quiera aplicar a otro elemento en la pagina
      por eso queda como : header__logo-box
    
      lo mismo para logo --> header__logo
    
  la misma logica se aplica para text-box --> header__text-box

  pero heading-primary es un bloque que probablemente sí se vuelva a usar en la página más adelante
    por eso queda como bloque y no como elemento

  heading-primary-main y heading-primary-sub son modificaciones de heading-primary
    por eso se les agrega un '-' más para indicar que son modifiers
      heading-primary--main
      heading-primary--sub

5 clase - sass
  
  scss es usado en el curso, es más cómodo porque el código css ya hecho es válido en scss(sin embargo no valido en sass)

6 clase - nesting y mixins - organizando el sass con el 7-1 pattern (5-32)

  "scripts": {
    "compile:sass": "node-sass sass/main.scss css/style.css -w"
  }

  con el nesting se ve mas facil cuando las posiciones son relativas y absolutas (ya sabes a que elemento se refieren mas rapidamente

  los componentes son los elementos independientes 
    son los resuable building blocks
    unidos por el layout de la pagina
  
  en layout van footer, navbar, etc
    cosa que van en varias paginas de tu diseño

  en la carpeta de vendor pueden ir 3rd party css
    como el de bootstrap

  en _base.scss van definiciones para el proyecto entero
    * , body , html

  en _typography van todas las deficiones que afecten algunos textos
    incluso los que se ponian en el body
      *así es mucho más facil buscar en tus archivos qué está afectando qué parte
  
7 clase - creando un propio grid system

  diferencia entre width y max-width
    max width
      si hay suficiente espacio. llena lo que dice
      si no hay suficiente espacio. llena el 100% de lo que hay

    width es mas estricto, si no hay suficiente se sale de 

  :last-child
    selecciona a los ultimos elementos hijos del elemento padre
    si pones #element:last-child
      no selecciona al ultimo elemento hijo de #element
      selecciona al ultimo elemento que sea hijo y que tenga el id de element

      no sirve mucho con ids, por eso se usa con clases

      .row:last-child
        selecciona a los ultimos .row de donde sea que se encuentren (no importa su padre, lo que importa son los ultimos hijos)

  para seleccionar todas las clases que COMIENZAN con "col-" !!! IMPORTANTE

    [class^="col-"] {

    }

    sirve cuando no quieres dejar un elemento con 2 clases como class="col col-1-of-2" (habiendo varios asi)
      cuando hay otras clases de "col-2-of-3" "col-1-of-4" etc
      te libras de ponerle una clase extra a todos los elementos

    otras aplicaciones
      selecionar algunos links en base a su href atribute(hacia donde apuntan)
      seleccionar los links que abren en nuevas paginas (porque target="_blank")

  si quieres seleccionar todas las que CONTIENEN con "col"

    [class*="col"] {

    }

  si quieres seleccionar todas las que TERMINAN con "col"

    [class$="col"] {

    }

  